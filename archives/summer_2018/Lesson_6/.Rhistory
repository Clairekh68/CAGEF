mean_func(c("Bacilli", "Bacteriodes")
)
mean_func(c("Bacilli", "Bacteriodes"))
mean_func("Bacilli")
mean_func("Bacteriodes")
mean_func("Bacilli")
mean_func("Bacteriodia")
mean_func("Bacilli")
mean_func("Clostridia")
mean_func("Bacteriodia")
dat <- filter(dat, Taxa == "Clostridia") %>%
summarize(mean = mean(OTUs), sd = sd(OTUs))
dat
dat <- filter(dat, Taxa == "Bacilli") %>%
summarize(mean = mean(OTUs), sd = sd(OTUs))
dat <- read.csv("data/long_SPE_pitlatrine.csv", header = T, stringsAsFactors = F)
mean_func <-
function(Taxa) {
summary_dat <- filter(dat, Taxa == Taxa) %>%
summarize(mean = mean(OTUs), sd = sd(OTUs))
return(summary_dat)
}
mean_func("Clostridia")
mean_func <-
function(Taxa) {
summary_dat <- filter(dat, Taxa == Taxa) %>%
summarize(mean = mean(OTUs), sd = sd(OTUs))
}
mean_func("Bacteriodia")
mean_func <-
function(Taxa) {
filter(dat, Taxa == Taxa) %>%
summarize(mean = mean(OTUs), sd = sd(OTUs))
}
mean_func("Bacteriodia")
out <- mean_func("Bacteriodia")
mean_func <-
function(Taxa) {
summary_dat <- filter(dat, Taxa == Taxa) %>%
summarize(mean = mean(OTUs), sd = sd(OTUs))
return(summary_dat)
}
out <- mean_func("Bacteriodia")
mean_func <-
function(Taxa) {
filter(dat, Taxa == Taxa) %>%
summarize(mean = mean(OTUs), sd = sd(OTUs))
print('Hello')
}
out <- mean_func("Bacteriodia")
mean_func <-
function(Taxa) {
filter(dat, Taxa == Taxa) %>%
summarize(mean = mean(OTUs), sd = sd(OTUs))
print('This is the mean and sd for', Taxa)
}
out <- mean_func("Bacteriodia")
mean_func <-
function(Taxa) {
filter(dat, Taxa == Taxa) %>%
summarize(mean = mean(OTUs), sd = sd(OTUs))
print(paste0('This is the mean and sd for', Taxa))
}
out <- mean_func("Bacteriodia")
mean_func <-
function(Taxa) {
filter(dat, Taxa == Taxa) %>%
summarize(mean = mean(OTUs), sd = sd(OTUs))
print(paste('This is the mean and sd for', Taxa))
}
out <- mean_func("Bacteriodia")
5.6+3.8
mean_func(c("Clostridia", "Bacteriodia", "Bacilli")
)
mean_func <-
function(Taxa) {
summary_dat <- filter(dat, Taxa == Taxa) %>%
summarize(mean = mean(OTUs), sd = sd(OTUs))
return(summary_dat)
}
mean_func(c("Clostridia", "Bacteriodia", "Bacilli"))
mean_func("Bacilllli")
mean_func(NA)
mean_func(210)
mean_func()
mean_func("Clostridia", funs = list(mean = quantile, median = median, sd = mean))
mean_func <- function(x, funs = list(mean = mean, sd = sd)) {
dat <- filter(dat, Taxa == x)
lapply(funs, function(f) f(dat$OTUs))
}
mean_func("Clostridia", funs = list(mean = quantile, median = median, sd = mean))
140*5
sessionInfo()
sessionInfo()
x <- 2
str(value)
str(x)
x <- c(2,4)
x <- c(2,4, 6, 8, 10, 12)
y <- data.frame(c(1,2,3), c(4,5,6)
)
View(y)
y <- data.frame(numbers = c(1,2,3), letters = c(a,b,c))
y <- data.frame(numbers = c(1,2,3), letters = c("a","b","c"))
View(y)
y <- as.data.frame(numbers = c(1,2,3), letters = c("a","b","c"))
str(y)
View(y)
View(y)
View(y)
help("base")
help('sum')
?sum
?base
help(package = "limma")
vec_char <- c("bacteria", "virus", "archaea")
#this is equivalent to
vec_char <- c('bacteria', 'virus', 'archaea')
vec_char
vec_num <- c(1:10)
vec_num
vec_log <- c(TRUE, FALSE, TRUE)
vec_log
vec_mixed <- c("bacteria", 1, TRUE)
vec_mixed
vec_mixed <- c(1, TRUE)
vec_mixed
vec_test <- as.numeric(vec_log)
vec_test
vec_log <- as.logical(vec_test)
vec_log
vec_mixed <- as.logical(vec_mixed)
vec_mixed
names(vec_log) <- c("male", "elderly", "heart attack")
#is equivalent to
vec_log <- c("male" = TRUE, "elderly" = FALSE, "heart attack" = TRUE)
vec_log
length(vec_char)
length(vec_num)
length(vec_log)
vec_char[3]
vec_char[2:3] #second and third element in the vector inclusive (this is not the same for all programming languages)
vec_log["male"]
list_mix <- list(character = c('bacteria', 'virus', 'archaea'),
num = c(1:10),
log = c(TRUE, FALSE, TRUE))
#formatting - equivalent, but less reader friendly for longer lists
list_mix = list(character = c('bacteria', 'virus', 'archaea'), num = c(1:10), log = c(TRUE, FALSE, TRUE))
list_mix
str(list_mix)
str(vec_mixed)
list_mix[[1]]
list_mix[[1]][2]
mat <- matrix(c(rep(0, 10), rep(1,10)), nrow = 5, ncol = 5)
mat
mat <- matrix(c(rep(0, 10), rep(1,10), rep(0, 5)), nrow = 5, ncol = 5)
mat
mat <- matrix(c(0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0), nrow = 5, ncol = 5)
mat
mat <- matrix(c(rep(TRUE, 10), rep(FALSE,10), rep(TRUE, 5)), nrow = 5, ncol = 5)
mat
mat <- matrix(as.numeric(c(rep(TRUE, 10), rep(FALSE,10), rep(TRUE, 5))), nrow = 5, ncol = 5)
mat
mat <- matrix(c(F,F,F,F,F,F,F,F,F,F,T,T,T,T,T,T,T,T,T,T,F,F,F,F,F), nrow = 5, ncol = 5)
mat <- matrix(as.numeric(c(F,F,F,F,F,F,F,F,F,F,T,T,T,T,T,T,T,T,T,T,F,F,F,F,F)), nrow = 5, ncol = 5)
mat
mat <- matrix(c(seq(from = 2, to = 12, by = 2), seq(3,12,3), rep(seq(0,1,1), 3)), nrow = 4, ncol = 4)
mat
mat <- matrix(c(seq(from = 2, to = 12, by = 2), seq(3,12,3), rep(seq(0,1,1), 3)), nrow = 4, ncol = 4, byrow = TRUE)
mat
matrix(c(seq(from = 2, to = 12, by = 2), seq(3,12,3), rep(F,T), 3), nrow = 4, ncol = 4, byrow = TRUE)
matrix(c(seq(from = 2, to = 12, by = 2), seq(3,12,3), rep(F,T, 3)), nrow = 4, ncol = 4, byrow = TRUE)
matrix(c(seq(from = 2, to = 12, by = 2), seq(3,12,3), rep(c(0,1), 3)), nrow = 4, ncol = 4, byrow = TRUE)
matrix(c(seq(from = 2, to = 12, by = 2), seq(3,12,3), rep(c(F,T), 3)), nrow = 4, ncol = 4, byrow = TRUE)
dat <- data.frame(character = c('bacteria', 'virus', 'archaea'),
num = c(1:3),
log = c(TRUE, FALSE, TRUE))
dat_large <-  rbind(dat, dat, dat)
nrow(dat_large)
ncol(dat_large)
dim(dat_large)
dat_large$character
levels(dat_large$character)
dat$character <- factor(dat$character, levels = c('bacteria', 'virus', 'archaea'))
levels(dat$character)
str(dat)
View(dat)
dat$character <- factor(dat$character, labels = c('bacteria', 'virus', 'archaea'))
levels(dat$character)
str(dat)
dat <- data.frame(character = c('bacteria', 'virus', 'archaea'),
num = c(1:3),
log = c(TRUE, FALSE, TRUE))
dat$character <- factor(dat$character, labels = c('bacteria', 'virus', 'archaea'))
levels(dat$character)
View(dat)
View(dat)
dat <- data.frame(character = c('bacteria', 'virus', 'archaea'),
num = c(1:3),
log = c(TRUE, FALSE, TRUE))
View(dat)
dat$character <- factor(dat$character, labels = c('bacteria', 'virus', 'archaea'))
View(dat)
dat$character <- factor(dat$character, labels = c('bacteria', 'virus', 'archaea'))
levels(dat$character)
str(dat)
dat <- data.frame(character = c('bacteria', 'virus', 'archaea'),
num = c(1:3),
log = c(TRUE, FALSE, TRUE))
View(dat)
dat <- data.frame(character = c('bacteria', 'virus', 'archaea'),
num = c(1:3),
log = c(TRUE, FALSE, TRUE))
dat_large$character
dat$character <- factor(dat$character, labels = c('bacteria', 'virus', 'archaea'))
levels(dat$character)
str(dat)
View(dat)
dat$character <- factor(dat$character, labels = c('bacteria', 'virus', 'archaea'))
View(dat)
dat <- data.frame(character = c('bacteria', 'virus', 'archaea'),
num = c(1:3),
log = c(TRUE, FALSE, TRUE))
dat$character <- factor(dat$character, levels = c('bacteria', 'virus', 'archaea'), labels = c('bacteria', 'virus', 'archaea'))
View(dat)
levels(dat$character)
str(dat)
dat_large$character
#equivalent to
dat_large[ ,1]
levels(dat_large$character)
#this is okay - but be aware of alphabetical order
dat$character <- factor(dat$character, levels = c('bacteria', 'virus', 'archaea'))
#bacteria, virus, archaea
#1,2,3
levels(dat$character)
str(dat)
dat <- data.frame(character = c('bacteria', 'virus', 'archaea'),
num = c(1:3),
log = c(TRUE, FALSE, TRUE))
dat$character <- factor(dat$character, levels = c('bacteria', 'virus', 'archaea'), ordered = TRUE)
View(dat)
levels(dat$character
)
class(dat$character)
as.numeric(levels(dat$character))
as.numeric(levels(dat$character))["dat$character"]
View(dat)
str(dat$character)
counts <- data.frame(Site1 = c(geneA = 2, geneB = 4, geneC = 12, geneD = 8),
Site2 = c(geneA = 15, geneB = 18, geneC = 27, geneD = 28),
Site3 = c(geneA = 10, geneB = 7, geneC = 13, geneD = 15))
counts
str(apply(counts, MARGIN = 1, sum))
str(apply(counts, MARGIN = 1, sum))
class(apply(counts, MARGIN = 1, sum))
apply(counts, MARGIN = 1, log) #this is base exp(1)
str(apply(counts, MARGIN = 1, log))
class(apply(counts, MARGIN = 1, log))
apply(counts, MARGIN = 1, sum)
apply(counts, MARGIN = 1, function(x) (x*3))
counts <- data.frame(Site1 = c(geneA = 2, geneB = 4, geneC = 12, geneD = 8),
Site2 = c(geneA = 15, geneB = NA, geneC = 27, geneD = 28),
Site3 = c(geneA = 10, geneB = 7, geneC = 13, geneD = NA))
counts
apply(counts, MARGIN = 1, mean)
na_vec <- c(5, 6, NA, 7, 7, NA)
is.na(na_vec)
which(is.na(na_vec))
remove_na_vec <- na_vec[c(-3,-6)]
remove_na_vec
na_vec <- c(5, 6, NA, 7, 7, NA)
#equivalentish to
remove_na_vec <- na.omit(na_vec)
remove_na_vec
remove_na_vec
is.na(counts)
any(is.na(counts))
complete.cases(counts)
counts[complete.cases(counts),]
apply(counts, MARGIN = 1, mean, na.rm = TRUE)
apply(counts, MARGIN = 1, log, na.rm = TRUE)
apply(counts, MARGIN = 1, na.omit(log))
is.nan(0/0)
counts <- data.frame(Site1 = c(geneA = 2, geneB = 4, geneC = 12, geneD = 8),
Site2 = c(geneA = 15, geneB = NaN, geneC = 27, geneD = 28),
Site3 = c(geneA = 10, geneB = 7, geneC = 13, geneD = NaN))
counts
nan_vec <- c(5, 6, NaN, 7, 7, NaN)
is.na(na_vec)
is.na(nan_vec)
is.nan(nan_vec)
is.nan(na_vec)
na_vec <- c(5, 6, NA, 7, 7, NA)
nan_vec <- c(5, 6, NaN, 7, 7, NaN)
is.na(na_vec)
is.na(nan_vec)
is.nan(nan_vec)
is.nan(na_vec)
nan_vec <- c(5, 6, NaN, 7, 7, Inf)
is.nan(nan_vec)
nan_vec <- c(5, 6, NaN, 7, 7, 0/0)
is.na(nan_vec)
is.nan(na_vec)
nan_vec <- c(5, 6, NaN, 7, 7, -i)
nan_vec <- c(5, 6, NaN, 7, 7, 0/0)
is.na(na_vec)
is.na(nan_vec)
is.nan(nan_vec)
is.nan(na_vec)
counts[is.na(counts)] <- 0
counts
library(readr)
sessionInfo()
install.packages(readr
)
install.packages('readr')
library(BiocInstaller)
biocLite('edgeR', dependencies = TRUE)
install.packages('TMB', type = 'source')
meta <- read.table(file = "data/ENV_pitlatrine.csv")
View(meta)
View(meta)
View(meta)
head(meta)
meta <- read.table(file = "data/ENV_pitlatrine.csv", sep = ",")
head(meta)
meta <- read.table(file = "data/ENV_pitlatrine.csv", sep = ",", header = TRUE)
head(meta)
meta <- read.table(file = "data/ENV_pitlatrine.csv", sep = ",", header = T, stringsAsFactors = F)
str(meta)
is.numeric(meta$CODt)
meta <- read.table(file = "data/ENV_pitlatrine.csv", sep = ",", header = T, stringsAsFactors = F, colClasses = c("character", rep("numeric",11))
str(meta)
meta <- read.table(file = "data/ENV_pitlatrine.csv", sep = ",", header = T, stringsAsFactors = F, colClasses = c("character", rep("numeric",11)))
str(meta)
meta <- read.table(file = "data/ENV_pitlatrine.csv", sep = ",", header = T, stringsAsFactors = F, colClasses = c("character", rep("integer",11)))
meta <- read.table(file = "data/ENV_pitlatrine.csv", sep = ",", header = T, stringsAsFactors = F, colClasses = c("character", rep("integer",11)))
is.integer(meta$pH)
meta <- read.table(file = "data/ENV_pitlatrine.csv", sep = ",", header = T, stringsAsFactors = F)
class(meta$CODs)
.Machine$numeric.max
.Machine$numeric.xmax
.Machine$double.xmax
.Machine$double.max
meta <- read.table(file = "data/ENV_pitlatrine.csv", sep = ",", header = T, stringsAsFactors = F, colClasses = c("character", rep("numeric",11)))
meta$CODt
is.double(meta$CODt)
meta <- read.table(file = "data/ENV_pitlatrine.csv", sep = ",", header = T, stringsAsFactors = F, colClasses = c("factor", rep("character",11)))
str(meta)
meta <- read.table(file = "data/ENV_pitlatrine.csv", sep = ",", header = T, stringsAsFactors = F, colClasses = c("factor", rep("c",11)))
meta <- read.table(file = "data/ENV_pitlatrine.csv", sep = ",", header = T, stringsAsFactors = F, colClasses = c("factor", "character", "character", "character", "character", "character", "character", "character", "character", "character", "character", "character"))
meta <- read.table(file = "data/ENV_pitlatrine.csv", sep = ",", header = T, stringsAsFactors = F, colClasses = c("factor", "character"))
meta <- read.table(file = "data/ENV_pitlatrine.csv", sep = ",", header = T, stringsAsFactors = F, colClasses = c("factor", "character"))
dat <- read.csv(file = "data/ENV_pitlatrine.csv", stringsAsFactors =F)
dat <- read.csv2(file = "data/ENV_pitlatrine.csv", stringsAsFactors =F)
dat <- read.csv2(file = "data/ENV_pitlatrine.csv", sep = ",", stringsAsFactors =F)
#read.delim2 has header=T as default and sep = "\t" and dec = ","
dat <- read.delim2(file = "data/ENV_pitlatrine.csv", sep = ",", stringsAsFactors =F)
#read.delim has header=T as default and sep = "\t"
dat <- read.delim(file = "data/ENV_pitlatrine.csv", sep = ",", stringsAsFactors =F)
#read.delim2 has header=T as default and sep = "\t" and dec = ","
dat <- read.delim2(file = "data/ENV_pitlatrine.csv", sep = ",", stringsAsFactors =F)
#read.delim2 has header=T as default and sep = "\t" and dec = ","
dat <- read.delim2(file = "data/ENV_pitlatrine.csv", sep = ",", dec = ".", stringsAsFactors =F)
library(readxl)
head(read_excel("data/books_alpha.xlsx"))
excel_sheets("data/books_alpha.xlsx")
path <- "data/books_alpha.xlsx"
lapply(excel_sheets(path), read_excel)
environment(apply)
environment(read_csv)
ex <- lapply(excel_sheets(path), read_excel, path = path)
str(ex)
str(ex[[3]])
str(ex[[1]])
library(googlesheets) #hypothetically already loaded from earlier code
gs_ls()
tail(gs_ls())
books$n_ws
books <- gs_title('Books Everyone Should Read')
books$n_ws
books$ws$ws_title
books$ws
str(books)
book_sheet1 <- gs_read(books, ws = 1)
book_sheet1 <- gs_read(books, ws = "Lists")
books <- gs_upload(file = "data/books_alpha.xlsx")
str(books)
View(books)
gs_download(gs_title("Books Everyone Should Read"), to = "books_alpha.xlsx")
gs_read(books, ws = 1, range = cell_cols(1:14))
xcastchar <- content(GET(casturl))
xcastchar <- readHTMLTable(xcastchar, which = 3)
library(httr)
xcastchar <- content(GET(casturl))
xcastchar <- readHTMLTable(xcastchar, which = 3)
library(XML)
xcastchar <- content(GET(casturl))
xcastchar <- readHTMLTable(xcastchar, which = 3)
casturl <- "http://www.imdb.com/title/tt0106179/fullcredits/"
xcastchar <- content(GET(casturl))
xcastchar <- readHTMLTable(xcastchar, which = 3)
library(xml)
library(xml2)
xcastchar <- content(GET(casturl))
xcastchar <- readHTMLTable(xcastchar, which = 3)
unable to find an inherited method for function ‘readHTMLTable’ for signature ‘"xml_documen
library(XML)
library(httr)
library(rvest)
getHrefs <- function(node, encoding) {
# The function evaluates every child of an HTML table:
# If it contains an anchor a, if returns its href attribute
# (preceded by the protocol and the base url) plus the link text.
# If not, it just returns the childs text. –
# via lukeA on http://stackoverflow.com/questions/31924546/rvest-table-scraping-including-links
# The function also evaluates if a cell contains a footnote and marks it with a superscript 1 (¹)
# For X-Files, a double dagger footnotes a "mythology arc" episode
#
# Args:
#  node: an html node
#  encoding: text encoding
#
# Return:
#  if the node is a link:
#   the link text, a "¹" sign if it contains an image, and the link URL
#
#  if the node is not a link:
#   the node text
x <- xmlChildren(node)$a
y <- ifelse(is.null(xmlChildren(node)$img), "", "¹")
if (!is.null(x))
paste0(xmlValue(x),
y,
"|",
"http://",
parseURI(url)$server,
xmlGetAttr(x, "href"))
else xmlValue(xmlChildren(node)$text)
}
getTable <- function(url, tabnum) {
# function to get the table from HTML and apply getHrefs
#
# Args:
#  url: The URL
#  tabnum: the number of the table in the overall HTML code
#
# Return:
#  a table
doc <- content(GET(url))
tab <- readHTMLTable(doc, which = tabnum, elFun = getHrefs)
tab
}
url <- "http://en.wikipedia.org/wiki/List_of_The_X-Files_episodes"
xf <- getTable(url, c(2:6, 8:11)) # tables 2-6, 8-11 (table 7 relates to the first movie)
# consolidate column names
cnames <- c("NrInSeries","NrInSeason","Title","Director","Writer","AirDate","ProdCode","Viewers")
xf <- lapply(xf, setNames, cnames)
# collapse table list into one data frame
xf <- do.call(rbind, xf)
str(xf)
library(RCurl)
url <- "http://en.wikipedia.org/wiki/List_of_The_X-Files_episodes"
xf <- getTable(url, c(2:6, 8:11)) # tables 2-6, 8-11 (table 7 relates to the first movie)
# consolidate column names
cnames <- c("NrInSeries","NrInSeason","Title","Director","Writer","AirDate","ProdCode","Viewers")
xf <- lapply(xf, setNames, cnames)
# collapse table list into one data frame
xf <- do.call(rbind, xf)
str(xf)
dat <- read.table("data/adult_income)
dat <- read.table("data/adult_income")
dat <- read.table("data/adult_income", sep = ",")
dat <- read.table("data/adult_income", sep = ",", skip = 1)
View(dat)
dat <- read_csv("data/adult_income")
dat <- read_csv("~/Git/CAGEF/Lesson_1/data/adult_income")
View(dat)
dat <- read_csv("~/Git/CAGEF/Lesson_1/data/adult_income", skip = 1)
dat <- read_csv("~/Git/CAGEF/Lesson_1/data/adult_income", header=TRUE)
View(dat)
dat <- read.table("data/adult_income", sep = ",", skip = 1)
colnames(dat) <- c("age", "workclass", "fnlwgt", "education", "education-num", "marital-status", "occupation", "relationship", "race", "sex", "capital-gain", "captial-loss", "hours-per-week", "native-country", "salary")
write.table(dat, "adult_income.tsv",  sep = "\t")
dat <- read.table("data/adult_income.tsv")
dat <- read.table("data/adult_income.tsv")
dat <- read.table("data/adult_income.tsv", stringsAsFactors = F)
#delete last column
dat <- dat[, -1]
dat <- write.csv(dat, "data/adult_income.csv", col.names = TRUE)
dat <- write.csv(dat, "data/adult_income.csv", row.names = FALSE)
#doesn't really matter if strings are character or factor
dat <- read.table("data/adult_income.tsv", stringsAsFactors = F)
#delete last column
dat <- dat[, -1]
#flavor of variables: integer and character or integer and factor
#row.names = FALSE to not be imported with extra column
dat <- write.csv(dat, "data/adult_income.csv", row.names = FALSE)
#doesn't really matter if strings are character or factor
dat <- read.table("data/adult_income.tsv", stringsAsFactors = F)
#delete last column
dat <- dat[, -1]
#flavor of variables: integer and character or integer and factor
#row.names = FALSE to not be imported with extra column
write.csv(dat, "data/adult_income.csv", row.names = FALSE)
#flavor of variables: integer and character or integer and factor
#row.names = FALSE to not be imported with extra column
write.csv(dat, "data/adult_income.csv")
vec_int <- c(1L, 8L)
vec_int
str(vec_int)
