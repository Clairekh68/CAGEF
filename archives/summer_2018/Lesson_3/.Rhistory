scale_y_log10() +
facet_grid(~Country, labeller = labeller(Country = labels)) +
ggtitle("Abundance of Taxa by Country") +
xlab(NULL) +
ylab("log(OTUs)") +
guides(fill=FALSE)
ggplot(mdat[mdat$Taxa %in% keep,] , aes(x = Taxa, y = OTUs, fill = Taxa)) +
geom_boxplot(outlier.colour = "red") +
theme_tufte() +
theme(axis.text.x = element_text(angle =90, hjust=1)) +
#        panel.border = element_rect(fill = NA),
#        strip.text.x = element_text(face = "bold", size = 16),
#        plot.title = element_text(hjust=0.5, size = 18),
#        axis.ticks.y = element_line()) +
scale_y_log10() +
facet_grid(~Country, labeller = labeller(Country = labels)) +
ggtitle("Abundance of Taxa by Country") +
xlab(NULL) +
ylab("log(OTUs)") +
guides(fill=FALSE)
ggplot(mdat[mdat$Taxa %in% keep,] , aes(x = Taxa, y = OTUs, fill = Taxa)) +
geom_boxplot(outlier.colour = "red") +
theme_stata() +
theme(axis.text.x = element_text(angle =90, hjust=1)) +
#        panel.border = element_rect(fill = NA),
#        strip.text.x = element_text(face = "bold", size = 16),
#        plot.title = element_text(hjust=0.5, size = 18),
#        axis.ticks.y = element_line()) +
scale_y_log10() +
facet_grid(~Country, labeller = labeller(Country = labels)) +
ggtitle("Abundance of Taxa by Country") +
xlab(NULL) +
ylab("log(OTUs)") +
guides(fill=FALSE)
ggplot(mdat[mdat$Taxa %in% keep,] , aes(x = Taxa, y = OTUs, fill = Taxa)) +
geom_boxplot(outlier.colour = "red") +
theme_excel() +
theme(axis.text.x = element_text(angle =90, hjust=1)) +
#        panel.border = element_rect(fill = NA),
#        strip.text.x = element_text(face = "bold", size = 16),
#        plot.title = element_text(hjust=0.5, size = 18),
#        axis.ticks.y = element_line()) +
scale_y_log10() +
facet_grid(~Country, labeller = labeller(Country = labels)) +
ggtitle("Abundance of Taxa by Country") +
xlab(NULL) +
ylab("log(OTUs)") +
guides(fill=FALSE)
ggplot(mdat[mdat$Taxa %in% keep,] , aes(x = Taxa, y = OTUs, fill = Taxa)) +
geom_boxplot(outlier.colour = "red") +
theme_pander() +
theme(axis.text.x = element_text(angle =90, hjust=1)) +
#        panel.border = element_rect(fill = NA),
#        strip.text.x = element_text(face = "bold", size = 16),
#        plot.title = element_text(hjust=0.5, size = 18),
#        axis.ticks.y = element_line()) +
scale_y_log10() +
facet_grid(~Country, labeller = labeller(Country = labels)) +
ggtitle("Abundance of Taxa by Country") +
xlab(NULL) +
ylab("log(OTUs)") +
guides(fill=FALSE)
ggplot(mdat[mdat$Taxa %in% keep,] , aes(x = Taxa, y = OTUs, fill = Taxa)) +
geom_boxplot(outlier.colour = "red") +
theme_par() +
theme(axis.text.x = element_text(angle =90, hjust=1)) +
#        panel.border = element_rect(fill = NA),
#        strip.text.x = element_text(face = "bold", size = 16),
#        plot.title = element_text(hjust=0.5, size = 18),
#        axis.ticks.y = element_line()) +
scale_y_log10() +
facet_grid(~Country, labeller = labeller(Country = labels)) +
ggtitle("Abundance of Taxa by Country") +
xlab(NULL) +
ylab("log(OTUs)") +
guides(fill=FALSE)
ggplot(mdat[mdat$Taxa %in% keep,] , aes(x = Taxa, y = OTUs, fill = Taxa)) +
geom_boxplot(outlier.colour = "red") +
theme_gdocs() +
theme(axis.text.x = element_text(angle =90, hjust=1)) +
#        panel.border = element_rect(fill = NA),
#        strip.text.x = element_text(face = "bold", size = 16),
#        plot.title = element_text(hjust=0.5, size = 18),
#        axis.ticks.y = element_line()) +
scale_y_log10() +
facet_grid(~Country, labeller = labeller(Country = labels)) +
ggtitle("Abundance of Taxa by Country") +
xlab(NULL) +
ylab("log(OTUs)") +
guides(fill=FALSE)
ggplot(mdat[mdat$Taxa %in% keep,] , aes(x = Taxa, y = OTUs, fill = Taxa)) +
geom_boxplot(outlier.colour = "red") +
theme_void() +
theme(axis.text.x = element_text(angle =90, hjust=1)) +
#        panel.border = element_rect(fill = NA),
#        strip.text.x = element_text(face = "bold", size = 16),
#        plot.title = element_text(hjust=0.5, size = 18),
#        axis.ticks.y = element_line()) +
scale_y_log10() +
facet_grid(~Country, labeller = labeller(Country = labels)) +
ggtitle("Abundance of Taxa by Country") +
xlab(NULL) +
ylab("log(OTUs)") +
guides(fill=FALSE)
ggplot(mdat[mdat$Taxa %in% keep,] , aes(x = Taxa, y = OTUs, fill = Taxa)) +
geom_boxplot(outlier.colour = "red") +
theme_dark() +
theme(axis.text.x = element_text(angle =90, hjust=1)) +
#        panel.border = element_rect(fill = NA),
#        strip.text.x = element_text(face = "bold", size = 16),
#        plot.title = element_text(hjust=0.5, size = 18),
#        axis.ticks.y = element_line()) +
scale_y_log10() +
facet_grid(~Country, labeller = labeller(Country = labels)) +
ggtitle("Abundance of Taxa by Country") +
xlab(NULL) +
ylab("log(OTUs)") +
guides(fill=FALSE)
ggplot(mdat[mdat$Taxa %in% keep,] , aes(x = Taxa, y = OTUs, fill = Taxa)) +
geom_boxplot(outlier.colour = "red") +
theme_classic() +
theme(axis.text.x = element_text(angle =90, hjust=1)) +
#        panel.border = element_rect(fill = NA),
#        strip.text.x = element_text(face = "bold", size = 16),
#        plot.title = element_text(hjust=0.5, size = 18),
#        axis.ticks.y = element_line()) +
scale_y_log10() +
facet_grid(~Country, labeller = labeller(Country = labels)) +
ggtitle("Abundance of Taxa by Country") +
xlab(NULL) +
ylab("log(OTUs)") +
guides(fill=FALSE)
ggplot(mdat[mdat$Taxa %in% keep,] , aes(x = Taxa, y = OTUs, fill = Taxa)) +
geom_boxplot(outlier.colour = "red") +
theme_bw() +
theme(axis.text.x = element_text(angle =90, hjust=1)) +
#        panel.border = element_rect(fill = NA),
#        strip.text.x = element_text(face = "bold", size = 16),
#        plot.title = element_text(hjust=0.5, size = 18),
#        axis.ticks.y = element_line()) +
scale_y_log10() +
facet_grid(~Country, labeller = labeller(Country = labels)) +
ggtitle("Abundance of Taxa by Country") +
xlab(NULL) +
ylab("log(OTUs)") +
guides(fill=FALSE)
ggplot(mdat[mdat$Taxa %in% keep,] , aes(x = Taxa, y = OTUs, fill = Taxa)) +
geom_boxplot(outlier.colour = "red") +
theme_grey() +
theme(axis.text.x = element_text(angle =90, hjust=1)) +
#        panel.border = element_rect(fill = NA),
#        strip.text.x = element_text(face = "bold", size = 16),
#        plot.title = element_text(hjust=0.5, size = 18),
#        axis.ticks.y = element_line()) +
scale_y_log10() +
facet_grid(~Country, labeller = labeller(Country = labels)) +
ggtitle("Abundance of Taxa by Country") +
xlab(NULL) +
ylab("log(OTUs)") +
guides(fill=FALSE)
ggplot(mdat[mdat$Taxa %in% keep,] , aes(x = Taxa, y = OTUs, fill = Taxa)) +
geom_boxplot(outlier.colour = "red") +
theme_classic() +
theme(axis.text.x = element_text(angle =90, hjust=1)) +
#        panel.border = element_rect(fill = NA),
#        strip.text.x = element_text(face = "bold", size = 16),
#        plot.title = element_text(hjust=0.5, size = 18),
#        axis.ticks.y = element_line()) +
scale_y_log10() +
facet_grid(~Country, labeller = labeller(Country = labels)) +
ggtitle("Abundance of Taxa by Country") +
xlab(NULL) +
ylab("log(OTUs)") +
guides(fill=FALSE)
theme_classic
theme_bw
ggplot(mdat[mdat$Taxa %in% keep,] , aes(x = Taxa, y = OTUs, fill = Taxa)) +
geom_boxplot(outlier.colour = "red") +
theme_bw() +
theme(axis.text.x = element_text(angle =90, hjust=1)) +
#        panel.border = element_rect(fill = NA),
#        strip.text.x = element_text(face = "bold", size = 16),
#        plot.title = element_text(hjust=0.5, size = 18),
#        axis.ticks.y = element_line()) +
scale_y_log10() +
facet_grid(~Country, labeller = labeller(Country = labels)) +
ggtitle("Abundance of Taxa by Country") +
xlab(NULL) +
ylab("log(OTUs)") +
guides(fill=FALSE)
ggplot(dat[dat$OTUs != 0,], aes(x = OTUs, fill=factor(Taxa)))  + xlim(0,50) +
geom_density(alpha=0.3, adjust = 4/5) +
guides(fill=FALSE)
ggplot(mdat[mdat$Taxa %in% keep,] , aes(x = Taxa, y = OTUs, fill = Taxa)) +
geom_boxplot(outlier.colour = "red") +
theme_minimal() +
scale_y_log10() +
facet_grid(~Country, labeller = labeller(Country = labels)) +
ggtitle("Abundance of Taxa by Country") +
xlab(NULL) +
ylab("log(OTUs)") +
guides(fill=FALSE)
ggplot(mdat[mdat$Taxa %in% keep,] , aes(x = Taxa, y = OTUs, fill = Taxa)) +
geom_boxplot(outlier.colour = "red") +
scale_y_log10() +
facet_grid(~Country, labeller = labeller(Country = labels)) +
ggtitle("Abundance of Taxa by Country") +
xlab() +
ylab("log(OTUs)") +
guides(fill=FALSE)
ggplot(mdat[mdat$Taxa %in% keep,] , aes(x = Taxa, y = OTUs, fill = Taxa)) +
geom_boxplot(outlier.colour = "red") +
scale_y_log10() +
facet_grid(~Country, labeller = labeller(Country = labels)) +
ggtitle("Abundance of Taxa by Country") +
xlab(NULL) +
ylab("log(OTUs)") +
guides(fill=FALSE)
p <- ggplot(mdat[mdat$Taxa %in% keep,] , aes(x = Taxa, y = OTUs, fill = Taxa)) +
geom_boxplot(outlier.colour = "red") +
scale_y_log10() +
facet_grid(~Country, labeller = labeller(Country = labels)) +
ggtitle("Abundance of Taxa by Country") +
xlab(NULL) +
ylab("log(OTUs)") +
guides(fill=FALSE)
p
p + theme_bw()
p
p + theme_bw()
ggplot(mdat[mdat$Taxa %in% keep,] , aes(x = Taxa, y = OTUs, fill = Taxa)) +
geom_boxplot(outlier.colour = "red") +
theme_minimal() +
theme(axis.text.x = element_text(angle =90, hjust=1),
panel.border = element_rect(fill = NA),
strip.text.x = element_text(face = "bold", size = 16),
plot.title = element_text(hjust=0.5, size = 18),
axis.ticks.y = element_line()) +
scale_y_log10() +
facet_grid(~Country, labeller = labeller(Country = labels)) +
ggtitle("Abundance of Taxa by Country") +
xlab(NULL) +
ylab("log(OTUs)") +
guides(fill=FALSE)
sessionInfo()
library(RColorBrewer)
palette <- brewer.pal(length(keep))
palette <- brewer.pal(length(keep), "Paired")
palette <- brewer.pal(length(keep), "BrBG")
palette <- brewer.pal(length(keep), "Blues")
length(keep)
palette <- brewer.pal(length(keep), c("Paired", "Set3"))
palette <- brewer.pal(length(keep), "Paired", "Set3"))
palette <- brewer.pal(length(keep), "Paired")
palette <- brewer.pal(length(keep), "Set3")
palette <- brewer.pal(length(keep), "Paired")
palette2 <- brewer.pal(length(keep), "Set3")
c(palette, palette2)
length(c(palette, palette2))
length(unique(c(palette, palette2)))
palette1 <- brewer.pal(length(keep), "Paired")
palette2 <- brewer.pal(length(keep), "Set3")
custom <- c(palette1, palette2)
p + scale_fill_manual(custom)
p + scale_fill_manual(values = custom)
p + scale_fill_brewer(palette = 1:3)
p + scale_fill_brewer()
p + scale_fill_brewer("PuRd")
library(viridis)
p + scale_fill_manual(values = viridis)
p + scale_fill_viridis()
p + scale_fill_manual(values = custom)
p + scale_fill_viridis(values = Taxa)
p + scale_fill_viridis(discrete = TRUE)
p + scale_fill_viridis(discrete = TRUE, option = "magma")
p + scale_fill_viridis(discrete = TRUE, option = "inferno")
p + scale_fill_viridis(discrete = TRUE, option = "plasma")
p + scale_fill_viridis(discrete = TRUE, option = "magma")
p + scale_fill_viridis(discrete = TRUE, option = "plasma")
display.brewer.all()
display.brewer.pal(
)
display.brewer.all()
display.brewer.all()
display.brewer.all()
p + scale_fill_brewer(palette = "Spectral")
p + scale_fill_brewer(palette = "Spectral")
display.brewer.all()
p + scale_fill_viridis(discrete = TRUE)
p + scale_fill_viridis(discrete = TRUE)
p + scale_fill_viridis(discrete = TRUE, option = "plasma")
cdat <- read.csv("data/SPE_pitlatrine.csv", row.names = 1)
cdat <- cor(cdat, method = "pearson", use = "complete.obs")
library(reshape2)
melt <-melt(cdat)
library(tidyverse)
gat <- gather(cdat)
gat <- gather(as.data.frame(cdat)))
gat <- gather(as.data.frame(cdat))
rownames(as.data.frame(cdat)))
rownames(as.data.frame(cdat))
cdat %>% rownames_to_column("Var1")
as.data.frame(cdat) %>% rownames_to_column("Var1") %>% gather("Var2", "cor")
as.data.frame(cdat) %>% rownames_to_column("Var1") %>% gather("Var1","Var2", "cor")
as.data.frame(cdat) %>% rownames_to_column("Var1") %>% gather("Var2", "cor", "Var1")
gather(as.data.frame(cdat))
as.data.frame(cdat) %>% rownames_to_column("Var1")
%>% gather(variable = "Var2", value = "cor", Var1)
as.data.frame(cdat) %>% rownames_to_column("Var1") %>% gather(variable = "Var2", value = "cor", Var1)
as.data.frame(cdat) %>% rownames_to_column("Var1") %>% gather(key = "Var2", value = "cor", Var1)
as.data.frame(cdat) %>% rownames_to_column("Var1") %>% gather(key = "Var2", value = "cor", -Var1)
clong <- as.data.frame(cdat) %>%
rownames_to_column("Site1") %>%
gather(key = "Site2", value = "correlation", -Site1)
ggplot(clong, aes(Site1, Site2, fill = correlation)) +
geom_tile() +
xlab(NULL) +
ylab(NULL) +
scale_fill_continuous(name = "Pearson\nCorrelation") +
theme(axis.text.x = element_text(angle =90, hjust=1))
options("device")
open
x11()
dev.cur()
ggplot(melt, aes(Var1, Var2, fill = value)) + geom_tile() +
scale_fill_gradient(name = "Pearson\nCorrelation", low = "red", high = "yellow") +
xlab(NULL) +
ylab(NULL)+
theme(axis.text.x = element_text(angle =90, hjust=1, size =5), legend.title = element_text(size=10), axis.text.y = element_text(size=5))
options("device")
dev.off()
pdf("heatmap.pdf")
ggplot(melt, aes(Var1, Var2, fill = value)) + geom_tile() +
scale_fill_gradient(name = "Pearson\nCorrelation", low = "red", high = "yellow") +
xlab(NULL) +
ylab(NULL)+
theme(axis.text.x = element_text(angle =90, hjust=1, size =5), legend.title = element_text(size=10), axis.text.y = element_text(size=5))
dev.off()
plot(cdat)
pdf("heatmap.pdf")
plot(cdat)
dev.off()
png("heatmap.png")
plot(cdat)
dev.off()
hmap <- ggplot(clong, aes(Site1, Site2, fill = correlation)) + geom_tile() +
scale_fill_gradient(name = "Pearson\nCorrelation", low = "red", high = "yellow") +
xlab(NULL) +
ylab(NULL)+
theme(axis.text.x = element_text(angle =90, hjust=1, size =5), legend.title = element_text(size=10), axis.text.y = element_text(size=5))
ggsave("heatmap.pdf", plot = hmap, path = "img", device = "pdf", scale = 2, width = 150, height = 110, units = "mm")
ggsave("heatmap", plot = hmap, path = "img", device = "pdf", scale = 2, width = 150, height = 110, units = "mm")
ggsave("img/heatmap", plot = hmap, device = "pdf", scale = 2, width = 150, height = 110, units = "mm")
subdat <- read.csv("data/SPE_pitlatrine.csv", stringsAsFactors = FALSE)
View(subdat)
test <- subdat %>%
rownames_to_column %>%
gather(var, value, -rowname) %>%
spread(rowname, value)
colnames(test) <- test[30,]
test <- test[-30,]
test[,-1] <- apply(test[,-1], 2, function(x) ifelse(as.numeric(x)!=0, 1, 0))
View(test)
t(subdat)
tsub <- t(subdat)
View(tsub)
tsub <- tsub[, c(1,4,9,17,22,19,20,33,35)]
View(tsub)
tsub[,-1] <- apply(tsub[,-1], 2, function(x) ifelse(as.numeric(x)!=0, 1, 0))
View(test)
View(tsub)
subdat <- read.csv("data/SPE_pitlatrine.csv", stringsAsFactors = FALSE)
tsub <- t(subdat)
tsub <- tsub[, c(1,4,9,17,22,19,20,33,35)]
View(tsub)
colnames(tsub) <- c("", tsub[1,])
colnames(tsub) <- c(tsub[1,])
View(tsub)
tsub <- t(subdat)
colnames(tsub) <- c(tsub[1,])
tsub <- tsub[-1, c(1,4,9,17,22,19,20,33,35)]
View(tsub)
tsub[,-1] <- apply(tsub[,-1], 2, function(x) ifelse(as.numeric(x)!=0, 1, 0))
upset(test, nsets = 8, empty.intersections = TRUE, order.by = "freq", nintersects = 15, main.bar.color = "black", sets.bar.color = "#56B4E9" )
library(UpSetR)
upset(test, nsets = 8, empty.intersections = TRUE, order.by = "freq", nintersects = 15, main.bar.color = "black", sets.bar.color = "#56B4E9" )
subdat <- read.csv("data/SPE_pitlatrine.csv", stringsAsFactors = FALSE)
test <- subdat %>%
rownames_to_column %>%
gather(var, value, -rowname) %>%
spread(rowname, value)
colnames(test) <- test[30,]
test <- test[-30,]
test[,-1] <- apply(test[,-1], 2, function(x) ifelse(as.numeric(x)!=0, 1, 0))
test <- test[, c(1,4,9,17,22,19,20,33,35)]
upset(test, nsets = 8, empty.intersections = TRUE, order.by = "freq", nintersects = 15, main.bar.color = "black", sets.bar.color = "#56B4E9" )
upset(tsub, nsets = 8, empty.intersections = TRUE, order.by = "freq", nintersects = 15, main.bar.color = "black", sets.bar.color = "#56B4E9" )
View(tsub)
tsub <- as.numeric(tsub[-1, c(1,4,9,17,22,19,20,33,35)])
tsub <- t(subdat)
colnames(tsub) <- c(tsub[1,])
tsub <- as.numeric(tsub[-1, c(1,4,9,17,22,19,20,33,35)])
tsub <- t(subdat)
colnames(tsub) <- c(tsub[1,])
tsub[,-1] <- apply(tsub[,-1], 2, function(x) ifelse(as.numeric(x)!=0, as.numeric(1), as.numeric(0)))
View(tsub)
tsub <- t(subdat)
colnames(tsub) <- c(tsub[1,])
tsub <-tsub[-1, c(1,4,9,17,22,19,20,33,35)]
View(tsub)
tsub <- apply(tsub, 2, function(x) ifelse(as.numeric(x)!=0, as.numeric(1), as.numeric(0)))
View(tsub)
upset(tsub, nsets = 8, empty.intersections = TRUE, order.by = "freq", nintersects = 15, main.bar.color = "black", sets.bar.color = "#56B4E9" )
upset(tsub, nsets = 8, empty.intersections = TRUE, order.by = "freq", nintersects = 15, main.bar.color = "black", sets.bar.color = "#56B4E9" )
View(tsub)
tsub <- t(subdat)
colnames(tsub) <- c(tsub[1,])
tsub <-tsub[-1, c(1,4,9,17,22,19,20,33,35)]
tsub <- apply(tsub, 2, function(x) as.numeric(ifelse(x!="0", 1, 0)))
View(tsub)
colnames(tsub) <- c(tsub[1,])
tsub <-tsub[-1, c(1,4,9,17,22,19,20,33,35)]
tsub <- t(subdat)
colnames(tsub) <- c(tsub[1,])
tsub <-tsub[-1, c(1,4,9,17,22,19,20,33,35)]
tsub <- apply(tsub, 2, function(x) as.numeric(ifelse(x!=" 0", 1, 0)))
View(tsub)
tsub <- t(subdat)
colnames(tsub) <- c(tsub[1,])
tsub <-tsub[-1, c(1,4,9,17,22,19,20,33,35)]
tsub <- apply(tsub, 2, function(x) as.numeric(ifelse(x!=" 0" | x !="0", 1, 0)))
tsub <- t(subdat)
colnames(tsub) <- c(tsub[1,])
tsub <-tsub[-1, c(1,4,9,17,22,19,20,33,35)]
tsub <- apply(tsub, 2, function(x) ifelse(as.numeric(x)!=0, as.numeric(1), as.numeric(0)))
View(tsub)
tsub <- t(subdat)
colnames(tsub) <- c(tsub[1,])
tsub <-tsub[-1, c(1,4,9,17,22,19,20,33,35)]
View(tsub)
names <- rownames(tsub)
tsub <- apply(tsub, 2, function(x) ifelse(as.numeric(x)!=0, as.numeric(1), as.numeric(0)))
rownames(tsub) <- names
upset(tsub, nsets = 8, empty.intersections = TRUE, order.by = "freq", nintersects = 15, main.bar.color = "black", sets.bar.color = "#56B4E9" )
View(tsub)
class(tsub)
dim(tsub)
upset(tsub, nsets = 9, empty.intersections = TRUE, order.by = "freq", nintersects = 15, main.bar.color = "black", sets.bar.color = "#56B4E9" )
upset(as.array(tsub), nsets = 9, empty.intersections = TRUE, order.by = "freq", nintersects = 15, main.bar.color = "black", sets.bar.color = "#56B4E9" )
test <- subdat %>%
rownames_to_column %>%
gather(var, value, -rowname) %>%
spread(rowname, value)
colnames(test) <- test[30,]
test <- test[-30,]
test[,-1] <- apply(test[,-1], 2, function(x) ifelse(as.numeric(x)!=0, 1, 0))
test <- test[, c(1,4,9,17,22,19,20,33,35)]
tsub <- dapply(tsub, 2, function(x) ifelse(as.numeric(x)!=0, as.numeric(1), as.numeric(0)))
View(test)
tsub <- as.data.frame(tsub)
View(tsub)
upset(tsub, nsets = 9, empty.intersections = TRUE, order.by = "freq", nintersects = 15, main.bar.color = "black", sets.bar.color = "#56B4E9" )
setdiff(test$Taxa, rownames(tsub))
upset(test, nsets = 8, empty.intersections = TRUE, order.by = "freq", nintersects = 15, main.bar.color = "black", sets.bar.color = "#56B4E9" )
eight <- c("Chloroflexi", "Acidobacteria_Gp16", "Acidobacteria_Gp5", "Cyanobacteria", "Lentisphaeria", "Deinococci", "Alphaproteobacteria", "Clostridia")
subdat <- subdat[subdat$Taxa %in% eight, ]
View(subdat)
test <- subdat %>%
gather(var, value, -Taxa) %>%
spread(Taxa, value)
View(test)
View(test)
test[,-1] <- apply(test[,-1], 2, function(x) ifelse(as.numeric(x)!=0, 1, 0))
upset(test, nsets = 8, empty.intersections = TRUE, order.by = "freq", nintersects = 15, main.bar.color = "black", sets.bar.color = "#56B4E9" )
subdat <- read.csv("data/SPE_pitlatrine.csv", stringsAsFactors = FALSE)
eight <- c("Chloroflexi", "Acidobacteria_Gp16", "Acidobacteria_Gp5", "Cyanobacteria", "Lentisphaeria", "Deinococci", "Alphaproteobacteria", "Clostridia")
#subset for the 8 taxa
subdat <- subdat[subdat$Taxa %in% eight, ]
#this is a tidyr way of transposing our data frame
subdat <- subdat %>%
gather(variable, value, -Taxa) %>%
spread(Taxa, value)
#if any OTUs are present, substitute the value with a 1 (exclude the first row which is character)
subdat[,-1] <- apply(subdat[,-1], 2, function(x) ifelse(x !=0, 1, 0))
upset(subdat, nsets = 8, empty.intersections = TRUE, order.by = "freq", nintersects = 15, main.bar.color = "black", sets.bar.color = "#56B4E9" )
beeplot <- ggplot(dat[(dat$Taxa=="Clostridia" | dat$Taxa == "Gammaproteobacteria" | dat$Taxa == "Unknown" | dat$Taxa == "Bacilli") & dat$Country == "T",] , aes(x = Taxa, y = OTUs)) +
geom_point() +
theme(axis.text.x = element_text(angle=90, hjust=1)) +
scale_y_log10()
dat <- read.csv("data/long_SPE_pitlatrine.csv", stringsAsFactors = F, header = TRUE)
beeplot <- ggplot(dat[(dat$Taxa=="Clostridia" | dat$Taxa == "Gammaproteobacteria" | dat$Taxa == "Unknown" | dat$Taxa == "Bacilli") & dat$Country == "T",] , aes(x = Taxa, y = OTUs)) +
geom_point() +
theme(axis.text.x = element_text(angle=90, hjust=1)) +
scale_y_log10()
beeplot + geom_boxplot()
ggplot(dat[(dat$Taxa=="Clostridia" | dat$Taxa == "Gammaproteobacteria" | dat$Taxa == "Unknown" | dat$Taxa == "Bacilli") & dat$Country == "T",] , aes(x = Taxa, y = OTUs)) +
geom_point() +
theme(axis.text.x = element_text(angle=90, hjust=1)) +
scale_y_log10()
ggplot(dat[(dat$Taxa=="Clostridia" | dat$Taxa == "Gammaproteobacteria" | dat$Taxa == "Unknown" | dat$Taxa == "Bacilli") & dat$Country == "T",] , aes(x = Taxa, y = OTUs)) +
geom_boxplot() +
geom_point() +
theme(axis.text.x = element_text(angle=90, hjust=1)) +
scale_y_log10()
beeplot <- ggplot(dat[(dat$Taxa=="Clostridia" | dat$Taxa == "Gammaproteobacteria" | dat$Taxa == "Unknown" | dat$Taxa == "Bacilli") & dat$Country == "T",] , aes(x = Taxa, y = OTUs)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle=90, hjust=1)) +
scale_y_log10()
beeplot + geom_point()
beeplot + geom_jitter()
library(ggbeeswarm)
beeplot + geom_beeswarm()
