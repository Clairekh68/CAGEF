legend(65,140, lty = c(1,1), col = c("black","red"), legend = c("Male","Female"))
###### LAB 1 ######################################################################
## read data set
cholesterol = read.table("SISG-Data-cholesterol.txt", header=T)
attach(cholesterol)
###### LAB 1 ######################################################################
## read data set
cholesterol = read.table("SISG-Data-cholesterol.txt", header=T)
attach(cholesterol)
detach(cholesterol)
detach(cholesterol)
detach(cholesterol)
###### LAB 1 ######################################################################
## read data set
cholesterol = read.table("SISG-Data-cholesterol.txt", header=T)
attach(cholesterol)
# compute univariate summary statistics for triglycerides
mean(TG)
median(TG)
sd(TG)
summary(TG)
# graphical displays for triglycerides
boxplot(TG)
stem(TG)
# create a binary indicator for BMI > 25
ibmi = ifelse(BMI > 25, 1, 0)
# compute univariate summary statistics for triglycerides for BMI > 25 and BMI <= 25
tapply(TG,ibmi,mean)
tapply(TG,ibmi,median)
tapply(TG,ibmi,sd)
# plot boxplots for triglycerides separately by BMI > 25 and BMI <= 25
boxplot(TG ~ ibmi)
t.test(TG ~ ibmi)
# scatterplot of triglycerides vs BMI
plot(BMI, TG)
# fit linear regression models for the association between triglycerides and BMI
fit1 = lm(TG ~ BMI)
summary(fit1)
# get prediction intervals at BMI = 23
predict(fit1, newdata = data.frame(BMI = 23), interval = "confidence")
predict(fit1, newdata = data.frame(BMI = 23), interval = "prediction")
###### LAB 2 ######################################################################
# load the gee() package for robust standard errors
library(gee)
# identify outliers in scatterplot of triglycerides vs BMI
plot(BMI,TG)
bmi37 = which(BMI<=37)
# excluding subjects with BMI > 37
fit2 = lm(TG[bmi37] ~ BMI[bmi37])
summary(fit2)
# analyze residuals from the regression analysis of triglycerides and BMI
plot(fit2$fitted, fit2$residuals)
abline(0,0)
qqnorm(fit2$residuals)
qqline(fit2$residuals)
# fit a linear regression model with robust standard errors
fit.gee = gee(TG ~ BMI, id = seq(1,length(TG)))
summary(fit.gee)
# calculate p-values for robust regression
z = abs(fit.gee$coef/sqrt(diag(fit.gee$robust)))
2*(1-pnorm(z))
# fit a regression model for log transformed triglycerides and BMI
fit.log = lm(log(TG) ~ BMI)
summary(fit.log)
# analyze residuals from the regression analysis of log transformed
# triglycerides and BMI
par(mfrow = c(1,2))
plot(fit.log$fitted, fit.log$residuals)
abline(0,0)
qqnorm(fit.log$residuals)
qqline(fit.log$residuals)
# binary variable indicating presence of ApoE4
APOE4 = ifelse(APOE %in% c(3,5,6), 1, 0)
# scatterplot with subjects stratified by ApoE4
par(mfrow = c(1,1))
plot(BMI[APOE4 == 0], TG[APOE4 == 0], pch = 19, xlab = "BMI", ylab = "triglycerides")
points(BMI[APOE4 == 1], TG[APOE4 == 1], pch = 1)
# multiple linear regression of triglycerides on BMI, ApoE4, and interaction
fit3 = lm(TG ~ BMI + APOE4 + BMI*APOE4)
summary(fit3)
###### LAB 3 ######################################################################
library(gee)
library(multcomp)
## Exploratory data analysis ----------------------------------------------------
## graphical display: boxplot
par(mfrow = c(1,2))
boxplot(chol ~ as.factor(rs4775401))
boxplot(chol ~ as.factor(APOE))
## alternative graphical display: graph of means
par(mfrow = c(2,1))
plot.design(chol ~ as.factor(rs4775401))
plot.design(chol ~ as.factor(APOE))
## numeric descriptives
tapply(chol, as.factor(rs4775401), mean)
tapply(chol, as.factor(rs4775401), sd)
tapply(chol, as.factor(APOE), mean)
tapply(chol, as.factor(APOE), sd)
## Inferential data analysis ----------------------------------------------------
fit1 = lm(chol ~ as.factor(rs4775401))
summary(fit1)
anova(fit1)
fit2 = lm(chol ~ as.factor(APOE))
summary(fit2)
anova(fit2)
M2 = contrMat(table(APOE), type="Tukey")
fit3 = lm(chol ~ -1 + as.factor(APOE))
mc2 = glht(fit3, linfct =M2)
summary(mc2, test=adjusted("none"))
summary(mc2, test=adjusted("bonferroni"))
summary(mc2, test=adjusted("holm"))
summary(mc2, test=adjusted("hochberg"))
summary(mc2, test=adjusted("hommel"))
summary(mc2, test=adjusted("BH"))
summary(mc2, test=adjusted("BY"))
summary(mc2, test=adjusted("fdr"))
## One-way (not assuming equal variances)
oneway.test(chol ~ as.factor(rs4775401))
oneway.test(chol ~ as.factor(APOE))
## Using robust standard errors
summary(gee(chol ~ as.factor(rs4775401), id=seq(1,length(chol))))
summary(gee(chol ~ as.factor(APOE), id=seq(1,length(chol))))
## non-parametric ANOVA
kruskal.test(chol ~ as.factor(rs4775401))
kruskal.test(chol ~ as.factor(APOE))
###### LAB 4 ######################################################################
## Two-way ANOVA ------------------------------------------------------------
## exploratory data analysis
table(rs174548, APOE)
tapply(chol, list(as.factor(rs174548), as.factor(APOE)), mean)
tapply(chol, list(as.factor(rs174548), as.factor(APOE)), sd)
plot.design(chol ~ as.factor(rs174548) + as.factor(APOE))
## model with interaction
fit1 = lm(chol ~ as.factor(rs174548)*as.factor(APOE))
summary(fit1)
## model without interaction
fit2 = lm(chol ~ as.factor(rs174548) + as.factor(APOE))
summary(fit2)
## compare models with and without interaction
anova(fit2,fit1)
###### LAB 5 ######################################################################
by(cbind(chol,age), APOE, cor, method="pearson")
by(cbind(chol,age), APOE, cor, method="spearman")
plot(age, chol, xlab="AGE (yrs)", ylab="CHOLESTEROL (mg/dl)", type="n")
for (i in 1:6){
lines(lowess(age[APOE==i], chol[APOE==i]), col=i)
points(age[APOE==i], chol[APOE==i], col=i, pch=16)
}
legend(min(age), max(chol), legend=paste("APOE", seq(1,6)), col=seq(1,6), pch=16, lty=1)
## ANCOVA Model with an interaction
fit1 = lm(chol ~ as.factor(APOE) * age)
summary(fit1)
## ANCOVA Model without an interaction
fit2 = lm(chol ~ as.factor(APOE) + age)
summary(fit2)
## compare models with and without interaction
anova(fit2, fit1)
## ONE-WAY ANOVA model
fit3 = lm(chol ~ as.factor(APOE))
summary(fit3)
anova(fit3, fit2)
## mean cholesterol for different genotypes
predict(fit3, new=data.frame(APOE=1))
predict(fit3, new=data.frame(APOE=2))
predict(fit3, new=data.frame(APOE=3))
predict(fit3, new=data.frame(APOE=4))
predict(fit3, new=data.frame(APOE=5))
predict(fit3, new=data.frame(APOE=6))
## mean cholesterol for different genotypes adjusted by age
predict(fit2, new=data.frame(age=mean(age),APOE=1))
predict(fit2, new=data.frame(age=mean(age),APOE=2))
predict(fit2, new=data.frame(age=mean(age),APOE=3))
predict(fit2, new=data.frame(age=mean(age),APOE=4))
predict(fit2, new=data.frame(age=mean(age),APOE=5))
predict(fit2, new=data.frame(age=mean(age),APOE=6))
detach(cholesterol)
## read data set ----------------------------------------------------------------
cholesterol = read.table("SISG-Data-cholesterol.txt", header=T)
View(cholesterol)
## read data set ----------------------------------------------------------------------
cholesterol = read.table("SISG-Data-cholesterol.txt", header=T)
attach(cholesterol)
# scatterplot of total cholesterol vs age
plot(age,chol, xlab = "Age (years)", ylab = "Total cholesterol (mg/dl)")
dim(cholesterol)
detach(cholesterol)
group = ifelse(chol$age >55, 1, 0)
group = ifelse(cholesterol$age >55, 1, 0)
t.test(cholesterol$chol ~ group)
ggplot(cholesterol, aes(age, group)) + geom_boxplot()
library(tidyverse)
ggplot(cholesterol, aes(age, group)) + geom_boxplot()
ggplot(cholesterol, aes(age, group = group)) + geom_boxplot()
cholesterol <- cholesterol %>% mutate(age_group = ifelse(cholesterol$age >55, 1, 0))
t.test(cholesterol$chol ~ cholesterol$group)
t.test(cholesterol$chol ~ cholesterol$age_group)
ggplot(cholesterol, aes(age_group,chol )) + geom_boxplot()
ggplot(cholesterol, aes(factor(age_group),chol)) + geom_boxplot()
ggplot(cholesterol, aes(factor(age_group),chol)) + geom_boxplot() +
ggplot(cholesterol, aes(factor(age_group),chol)) + geom_boxplot() +
scale_x_discrete(labels = c("30-55", "56-80"))
ggplot(cholesterol, aes(factor(age_group),chol)) + geom_boxplot() +
scale_x_discrete(labels = c("30-55", "56-80"))
ggplot(cholesterol, aes(factor(age_group),chol)) + geom_boxplot() +
scale_x_discrete(labels = c("30-55", "56-80")) +
xlab("age") +
ylab("cholestorol (mg/dl)")
ggplot(cholesterol, aes(age, chol)) + geom_point() + stat_smooth()
ggplot(cholesterol, aes(age, chol)) + geom_point() + stat_smooth(method = "lm")
cholesterol <- read.delim("data/SISG-Data-cholesterol.txt", header = TRUE)
cholesterol <- read.delim("data/SISG-Data-cholesterol.txt", sep = "\t", header = TRUE)
cholesterol <- read.delim("data/SISG-Data-cholesterol.txt", sep = "\t", header = TRUE)
cholesterol <- read.delim("data/SISG-Data-cholesterol.txt", sep = "/t", header = TRUE)
cholesterol <- read.delim("data/SISG-Data-cholesterol.txt", sep = ",", header = TRUE)
cholesterol <- read.delim("data/SISG-Data-cholesterol.txt", sep = ".", header = TRUE)
cholesterol <- read.delim("data/SISG-Data-cholesterol.txt", sep = " ", header = TRUE)
lm(chol~age, data = cholesterol)
fit <- lm(chol~age, data = cholesterol)
summary(fit)
lm(chol~age, data = cholesterol)
min(cholesterol$chol)
detach(cholesterol)
summary(fit)
confint(fit)
predict.lm(fit, newdata = data.frame(age=47), interval = "confidence")
predict.lm(fit, newdata = data.frame(age=47), interval = "preddiction")
predict.lm(fit, newdata = data.frame(age=47), interval = "prediction")
str(fit)
ggplot(cholesterol, aes(x=chol, y=fit$residuals) + geom_point()
ggplot(cholesterol, aes(x=chol, y=fit$residuals)) + geom_point()
ggplot(cholesterol, aes(x=age, y=fit$residuals)) + geom_point()
ggplot(cholesterol, aes(x=age, y=fit$residuals)) + geom_point() + geom_hline(yintercept=0, color="black")
library(broom)
broom(git)
broom(fit)
library(broom)
tidy(fit)
augment(fit)
datfit <- augment(fit)
ggplt(datfit, aes(.fitted, .resid)) + geom_point()
ggplot(datfit, aes(.fitted, .resid)) + geom_point()
ggplot(datfit, aes(.fitted, .resid)) + geom_point()  + geom_hline(yintercept=0, color="black")
qqnorm(fit$residuals)
qqline(fit$residuals)
qqnorm(fit$residuals)
ggplot(cholesterol, aes(age, TG)) + geom_point()
ggplot(cholesterol, aes(age, TG)) + geom_point() + stat_smooth(model = "lm")
ggplot(cholesterol, aes(age, TG)) + geom_point() + geom_smooth(model = "lm")
ggplot(cholesterol, aes(age, TG)) + geom_point() + stat_smooth(model = "lm")
ggplot(cholesterol, aes(age, TG)) + geom_point() + stat_smooth(model = "lm") + geom_smooth(method = "lm")
ggplot(cholesterol, aes(age, TG)) + geom_point() + geom_smooth(method = "lm")
fitTG <- lm(TG ~ age, data = cholesterol)
datfitTG <- augment(fitTG)
ggplot(cholesterol, aes(age, TG)) + geom_point() + stat_smooth(method = "lm")
ggplot(datfitTG, aes(.fitted, .resid)) + geom_point()  + geom_hline(yintercept=0, color="black")
library(gee)
gee(TG~age, data = cholesterol, id = seq(1, length(age))
gee(TG~age, data = cholesterol, id = seq(1, length(age)))
geefit <- gee(TG~age, data = cholesterol, id = seq(1, length(age)))
summary(geefit)
qqnorm(datfit$.resid)
qqnorm(datfitTG$.resid)
augment(geefit)
str(geefit)
plot(geefit$fitted.values, geefit$residuals)
str(geefit)
gee(TG~age, data = cholesterol, id = seq(1, length(age)), plot = TRUE)
gee(TG~age, data = cholesterol, plot=TRUE, id = seq(1, length(age)))
install.packages(spind)
install.packages("spind")
library(spind)
GEE(TG~age, data = cholesterol, id = seq(1, length(age)))
GEE(TG~age, data = cholesterol, plot=TRUE)
install.packages("BCgee")
fitbc <- BCgee(geefit)
library(BCgee)
fitbc <- BCgee(geefit)
plot(fitbc$fitted.values, fitbc$residuals)
summary(geefit)
summary(fitbc)
plot(geefit$residuals, fitbc$residuals)
geefit <- gee(TG ~ age, data = cholesterol, id = seq(1, length(age)))
fitbc <- BCgee(geefit)
plot(geefit$residuals, fitbc$residuals)
it <- gee(y ~ Period+Drug, id = id, data = cereb, family = binomial(logit),
corstr = "exchangeable")
fitbc <- BCgee(fit)
##compare coefficients, standard errors, and Wald statistics
summary(fit)$coefficients
summary(fitbc)$coefficients
##compare residuals
fit$residuals
fitbc$residuals
summary(geefit)$coefficients
geefit <- gee(TG ~ age, data = cholesterol, id = seq(1, length(age)))
summary(geefit)$coefficients
fitbc <- BCgee(geefit)
summary(fitbc)$coefficients
str(geefit)
geefit <- gee(TG ~ age, data = cholesterol)
geefit <- gee(formula = TG ~ age, data = cholesterol)
geefit <- gee(formula = TG ~ age, data = cholesterol, id = age)
fitbc <- BCgee(geefit)
str(geefit)
logfit <- lm(log(TG) ~ age, data = cholesterol)
logdat <- augment(logfit)
ggplot(logdat, aes(.fitted, .resid)) + geom_point()  + geom_hline(yintercept=0, color="black")
summary(logfit)
exp(3.7)
exp10(3.7)
log(2)
exp(0.6931472)
log(3.7115803)
exp(3.7115803)
View(fitTG)
getwd()
setwd("/home/erica/Git/CAGEF/Lesson_5/"
ggplot(cholesterol, aes(BMI, chol)) + geom_point() + stat_smooth(method = "lm")
setwd("/home/erica/Git/CAGEF/Lesson_5/")
ggplot(cholesterol, aes(BMI, chol)) + geom_point() + stat_smooth(method = "lm")
ggplot(cholesterol, aes(age, BMI)) + geom_point() + stat_smooth(method = "lm")
lm(chol ~ age + BMI, data = cholesterol)
mfit <- lm(chol ~ age + BMI, data = cholesterol)
summary(mfit)
anova(datfit, mfit)
anova(fit, mfit)
tt <- t.test(cholesterol$chol ~ cholesterol$age_group)
mfit2 <- lm(chol ~ age + sex, data = cholesterol)
summary(mfit2)
intfit <- lm(chol ~ age * sex)
intfit <- lm(chol ~ age * sex, data = cholesterol)
summary(intfit)
str(cholesterol$sex)
anova(mfit2, intfit)
anova(mfit, mfit2)
anova(fit, mfit2)
ggplot(cholesterol, aes(age, chol, color = sex)) + geom_point() + stat_smooth(method = "lm")
ggplot(cholesterol, aes(age, chol, color = factor(sex))) + geom_point() + stat_smooth(method = "lm")
mfit <- lm(chol ~ BMI + age, data = cholesterol)
cholesterol <- read.delim("data/SISG-Data-cholesterol.txt", sep = " ", header = TRUE)
mfit <- lm(chol ~ BMI + age, data = cholesterol)
summary(mfit)
mfit <- lm(chol ~ age + BMI, data = cholesterol)
summary(mfit)
mfit <- lm(chol ~ BMI + age, data = cholesterol)
summary(mfit)
anova(mfit)
anova(fit, mfit)
class(mfit)
ifit <- lm(chol ~ age * BMI, data = cholesterol)
summary(ifit)
anova(mfit, ifit)
fit <- lm(chol~age, data = cholesterol)
anova(fit, ifit)
summary(ifit)
lm(chol ~ age * BMI, data = cholesterol)
lm(chol ~ age + BMI + age * BMI, data = cholesterol)
anova(fit, ifit)
anova(mfit, ifit)
predict(mfit, newdata = data.frame(BMI = 23), interval = "confidence")
predict(mfit, newdata = data.frame(BMI = 23, age = 60), interval = "confidence")
predict(mfit, newdata = data.frame(BMI = c(21,22,23), age = 60), interval = "prediction")
cholesterol <- read.delim("data/SISG-Data-cholesterol.txt", sep = " ", header = TRUE)
factor(chol$APOE)
factor(cholester$$APOE)
factor(cholester$APOE)
factor(cholesterol$APOE)
factor(cholesterol$rs4775401)
cholesterol <- cholesterol %>% mutate(age_group = ifelse(test = cholesterol$age > 55, yes = 1, no = 0))
str(cholesterol)
cholesterol <- cholesterol %>% mutate(age_group = ifelse(test = cholesterol$age > 55, yes = 1, no = 0))
library(dplyr)
cholesterol <- cholesterol %>% mutate(age_group = ifelse(test = cholesterol$age > 55, yes = 1, no = 0))
sum(cholesterol$age_group)
sum(cholesterol$age_group ==0)
table(cholesterol$rs174548)
#generate a contrast matrix for multiple comparisons
M = contrMat(table(cholesterol$rs174548), type = "Tukey")
M
library(glm)
library(multicomp)
library(multcomp)
M = contrMat(table(cholesterol$rs174548), type = "Tukey")
View(M)
View(M)
contrMat(table(cholesterol$rs174548), type = "Dunnett")
contrMat(table(cholesterol$rs174548), type = "Sequen")
contrMat(table(cholesterol$rs174548), type = "Williams")
contrMat(table(cholesterol$rs174548), type = "GrandMean")
contrMat(table(cholesterol$rs174548), type = "UmbrellaWilliams")
contrMat(table(cholesterol$rs174548), type = "Changepoint")
contrMat(table(cholesterol$rs174548), base = 2)
contrMat(table(cholesterol$rs174548), base = 3)
contrMat(table(cholesterol$rs174548), type = "AVE")
#generate a contrast matrix for multiple comparisons
M = contrMat(table(cholesterol$rs174548), type = "Tukey")
M
mc = glht(tfit, linfct = M)
tfit <- lm(chol ~ -1 + as.factor(rs174548), data = cholesterol)
mc = glht(tfit, linfct = M)
#adjust pvalues for mulitple comparisons
summary(mc, test = adjusted("none"))
summary(mc, test = adjusted("bonferroni"))
#other types
summary(mc, test = adjusted("BH"))
summary(mc, test = adjusted("fdr"))
summary(mc, test = adjusted("bonferroni"))
#other types
summary(mc, test = adjusted("BH"))
summary(mc, test = adjusted("bonferroni"))
ggplot(cholesterol, aes(as.factor(sex), chol)) + geom_boxplot()
library(ggplot2)
ggplot(cholesterol, aes(as.factor(sex), chol)) + geom_boxplot()
ggplot(cholesterol, aes(as.factor(sex), chol)) + geom_boxplot() + geom_point()
ggplot(cholesterol, aes(as.factor(sex), chol)) + geom_boxplot()
predict.lm(fit, newdata = data.frame(age=47), interval = "confidence")
fit <- lm(chol ~ age, data = cholesterol)
predict.lm(fit, newdata = data.frame(age=47), interval = "confidence")
predict.lm(fit, newdata = data.frame(age=47), interval = "prediction")
predict.lm(fit, newdata = data.frame(age=47), interval = "none")
predict.lm(fit, newdata = data.frame(age=47))
predict.lm(fit, newdata = age=47)
predict.lm(fit, newdata = 47)
predict.lm(fit, newdata = data.frame(age=47))
predict.lm(fit, newdata = data.frame(age=47), interval = "prediction", level = 0.95)
predict.lm(fit, newdata = data.frame(age=47), interval = "prediction")
predict.lm(fit, newdata = data.frame(age=47), interval = "prediction")
predict.lm(fit, newdata = data.frame(age=47), interval = "confidence")
predict.lm(fit, newdata = data.frame(age=47), interval = "prediction")
pred <- predict.lm(fit, newdata = data.frame(age=47), interval = "prediction")
summary(pred)
predict(mfit, newdata = data.frame(BMI = c(21,26,30), age = 60), interval = "prediction")
mfit <- lm(chol ~ age + BMI, data = cholesterol)
predict(mfit, newdata = data.frame(BMI = c(21,26,30), age = 60), interval = "prediction")
summary(fit)
predict(mfit, newdata = data.frame(BMI = c(21,26,30)), interval = "prediction")
predict(mfit)
predict(mfit, se.fit=TRUE)
predict(mfit, newdata = data.frame(BMI = c(21,26,30), age = 60), interval = "prediction", se.fit=TRUE)
class(fit)
str(datfit)
ggplot(cholesterol, aes(x=age, y=fit[2])) +
geom_point() +
geom_hline(yintercept=0, color="black")
ggplot(cholesterol, aes(x=age, y=fit['residuals'])) +
geom_point() +
geom_hline(yintercept=0, color="black")
ggplot(cholesterol, aes(x=age, y=fit[['residuals']])) +
geom_point() +
geom_hline(yintercept=0, color="black")
bartlett.test(chol ~ as.factor(rs174548), data = cholesterol)
bartlett.test(chol ~ age, data = cholesterol)
require(graphics)
plot(count ~ spray, data = InsectSprays)
bartlett.test(InsectSprays$count, InsectSprays$spray)
bartlett.test(count ~ spray, data = InsectSprays)
bartlett.test(chol ~ as.factor(rs174548), data = cholesterol)
bartlett.test(chol ~ factor(rs174548), data = cholesterol)
bartlett.test(chol ~ factor(APOE), data = cholesterol)
bartlett.test(chol ~ factor(sex), data = cholesterol)
bartlett.test(chol ~ as.factor(sex), data = cholesterol)
factor(cholesterol$sex)
cholesterol$sex <- factor(cholesterol$sex)
cholesterol$sex <- as.factor(cholesterol$sex)
ggplot(cholesterol, aes(x=sex, y=anfit1[2])) +
geom_point()
anfit1 <- lm(chol ~ as.factor(rs174548), data = cholesterol)
anfit1 <- lm(chol ~ as.factor(rs174548), data = cholesterol)
ggplot(cholesterol, aes(x=sex, y=anfit1[2])) +
geom_point()
geom_boxplot()
ggplot(cholesterol, aes(x=sex, y=anfit1[2])) +
geom_boxplot()
anfit1 <- augment(anfit1)
library(broom)
anfit1 <- augment(anfit1)
ggplot(anfit1, aes(.fitted, .resid)) +
geom_point()  +
geom_hline(yintercept=0, color="black")
ggplot(anfit1, aes(.fitted, .resid)) +
geom_jitter()  +
geom_hline(yintercept=0, color="black")
str(anfit1)
ggplot(anfit1, aes(.fitted, .resid), color = rs174548) +
geom_point()  +
geom_hline(yintercept=0, color="black")
ggplot(anfit1, aes(.fitted, .resid)) +
geom_point()  +
geom_hline(yintercept=0, color="black")
str(anfit1)
ggplot(anfit1, aes(.fitted, .resid, color = as.factor.rs174548.)) +
geom_point()  +
geom_histogram() +
geom_hline(yintercept=0, color="black")
datfit <- augment(fit)
qqnorm(datfit$.resid)
qqline(datfit$.resid)
qqline(datfitTG$.resid)
fitTG <- lm(TG ~ age, data = cholesterol)
datfitTG <- augment(fitTG)
qqline(datfitTG$.resid)
qqnorm(datfitTG$.resid) + abline(y~x)
geefit <- gee(TG ~ age, data = cholesterol, id = seq(1, length(age)))
library(gee)
geefit <- gee(TG ~ age, data = cholesterol, id = seq(1, length(age)))
summary(geefit)
summary(datafit)
fitTG <- lm(TG ~ age, data = cholesterol)
datfitTG <- augment(fitTG)
summary(datafit)
summary(datfit)
summary(fitTG)
length(cholesterol$age)
